/* Qubino Energy Meter ZMNHTD1 by He-Man321
Version 	1.0 - 2020/10/18
		1.1 - 2020/10/28 - Fixed configuration problem
NOTE: 	Make sure you add this device using the QR code on the side of the device, not by simply scanning for nearby devices from the hub.
		Once added, confirm the My Devices page in the IDE shows the device as: "networkSecurityLevel: ZWAVE_S2_AUTHENTICATED"
        Failure to do this will result in corrupt data from the device. */
metadata {
	definition (name: "Qubino Energy Meter", namespace: "He-Man321", author: "He-Man321") {
		capability "Energy Meter"
		capability "Power Meter"
		capability "Configuration"
		capability "Sensor"
		capability "Health Check"
		capability "Refresh"
        capability "Voltage Measurement"
		command "reset"
        attribute "kVAh","number"
        attribute "reactive","number"
        attribute "real","number"
        attribute "lastUpdate","date"
		fingerprint deviceId: "0x2101", inClusters: " 0x70,0x31,0x72,0x86,0x32,0x80,0x85,0x60", deviceJoinName: "Qubino Energy Meter"
		fingerprint mfr: "0159", prod: "0007", model: "0052", deviceJoinName: "Qubino Energy Meter"
	}
	tiles(scale: 2) {
		multiAttributeTile(name:"power", type: "generic", width: 6, height: 4){
			tileAttribute("device.power",key:"PRIMARY_CONTROL") {attributeState("default", label:'${currentValue} W')}
			tileAttribute("device.lastUpdate",key:"SECONDARY_CONTROL") {attributeState("default", label:'Last updated ${currentValue}',icon:"st.Office.office7")} 
		}
		valueTile("energy", "device.energy", decoration: "flat", width:2,height:1) {state "default", label:'Cumulative ${currentValue} kWh'}
        valueTile("kVAh", "device.kVAh", decoration: "flat", width:2,height:1) {state "default", label:'Cumulative ${currentValue} kVAh'}
		valueTile("voltage", "device.voltage", decoration: "flat", width:2,height:1) {state "default", label:'${currentValue} V'}
        valueTile("current", "device.current", decoration: "flat", width:2,height:1) {state "default", label:'${currentValue} A'}
        valueTile("reactive", "device.reactive", decoration: "flat", width:2,height:1) {state "default", label:'Reactive ${currentValue}%'}
        valueTile("real", "device.real", decoration: "flat", width:2,height:1) {state "default", label:'Real ${currentValue}%'}
		standardTile("reset", "device.energy", inactiveLabel: false, decoration: "flat",width:2,height:2) {state "default", label:'reset kWh', action:"reset"}
		standardTile("refresh", "command.refresh", inactiveLabel: false, decoration: "flat",width:2,height:2) {state "default", label:'refresh', action:"refresh.refresh", icon:"st.secondary.refresh"}
		main (["power"])
		details(["power","energy","kVAh","voltage","current","reactive","real","reset","refresh"])
	}
	preferences {
		section(title:"Change") {
        		paragraph "Change"
            		input "change","integer",title:"Percentage change of power to prompt report.",range:"1..100",defaultValue:10,required:true
        	}
        	section(title:"Interval") {
            		paragraph "Report interval"
                	input "interval","enum",title:"Report interval",
                    	options:["0":"Disabled","60":"1 Minute","300":"5 minutes","600":"10 minutes","1800":"30 minutes","3600":"1 hour"],defaultValue:"600",required:true
        	}
	}
}

def installed() {
	log.debug "Installed..."
	response(refresh())
}

def updated() {
	def cmds = []
	if (zwaveInfo.model.equals("0052")) {
		log.debug "Setting Qubino to $change% change (parameter 40) or every $interval seconds (parameter 42)"
        cmds << zwave.configurationV1.configurationSet(parameterNumber:40,size:1,scaledConfigurationValue:change.toInteger())
        cmds << zwave.configurationV1.configurationSet(parameterNumber:42,size:2,scaledConfigurationValue:interval.toInteger())
	}
	else
		log.debug "Unknown model: $zwaveInfo.model"
    //def params = [7,11,12,13,14,40,42,45,100,110,111,112]
    //log.debug("Scanning parameters $params")
    //(params).each { i ->
    //	cmds << zwave.configurationV2.configurationGet(parameterNumber: i)
    //}
    sendHubCommand(cmds.collect{response(zwave.securityV1.securityMessageEncapsulation().encapsulate(it))},1000)
}

def parse(String description) {
	log.debug ("Parse $description")
    def result = null
    def cmd = zwave.parse(description, [0x31: 1, 0x32: 3, 0x60: 3])
    if (cmd) result = createEvent(zwaveEvent(cmd))
    return result
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
    log.debug("Parameter $cmd.parameterNumber: Value: $cmd.scaledConfigurationValue Size: $cmd.size")
}

def zwaveEvent(physicalgraph.zwave.commands.meterv3.MeterReport cmd) {
	Date date = new Date()
    sendEvent(name:"lastUpdate",value:date.format("dd/MM/yyyy HH:mm:ss"))
    def map = [name:"",value:""]
    if (cmd.meterType==1) {
    	switch (cmd.scale) {
        	case 0:  // kWh
            	map.name = "energy"
                map.value = Math.round(cmd.scaledMeterValue)
            break
        	case 1:  // kVAh
            	map.name = "kVAh"
            	map.value = Math.round(cmd.scaledMeterValue)
        	break
        	case 2:  // Watts
            	map.name = "power"
            	map.value = Math.round(cmd.scaledMeterValue)
        	break
        	case 3:  // Pulse count - Never used?
            	map.name = "pulses"
            	map.value = Math.round(cmd.scaledMeterValue)
        	break
        	case 4:  // Volts
            	map.name = "voltage"
            	map.value = Math.round(cmd.scaledMeterValue)
            break
        	case 5:  // Amps
            	map.name = "current"
            	map.value = Math.round(cmd.scaledMeterValue*10)/10
        	break
        	case 6:  // Power Factor (range 0 - 1. 0=100% reactive poswer, 1=100% real power)
            	map.name = "reactive"
            	def reactive=(1-cmd.scaledMeterValue)*100
            	map.value = Math.round(reactive*100)/100
                sendEvent(name:"real",value:100-map.value)
        	break
			case 7:  // kVar and kVarh but requires SmartThings to support V4 of the Smart Meter Comand Class, which it curretly does not.
            	return
        	break
        	default:
                log.warn "Unknown scale: $cmd.scale Value: $cmd.scaledMeterValue"
                return
        	break
		}
	}
	else {
        log.warn "Unknown meter type: $cmd.meterType"
        return
    }    
    //log.debug("Meter report: $cmd.scale $map.name: $map.value")	
	sendEvent(map)    
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	// Handles all Z-Wave commands we aren't interested in
    log.warn "Unknown event!"
	[:]
}

def refresh() {
	delayBetween([
		encap(zwave.meterV3.meterGet(scale: 0)),
		encap(zwave.meterV3.meterGet(scale: 1)),
		encap(zwave.meterV3.meterGet(scale: 2)),
		encap(zwave.meterV3.meterGet(scale: 3)),
		encap(zwave.meterV3.meterGet(scale: 4)),
		encap(zwave.meterV3.meterGet(scale: 5)),
		encap(zwave.meterV3.meterGet(scale: 6))
	],200)    
}

def reset() {
	delayBetween([
		encap(zwave.meterV3.meterReset()),
		encap(zwave.meterV3.meterGet(scale: 0))
	],1000)
}

private encap(physicalgraph.zwave.Command cmd) {
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}
